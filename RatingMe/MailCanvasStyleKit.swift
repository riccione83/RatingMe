//
//  MailCanvasStyleKit.swift
//  RatingMe
//
//  Created by Riccardo Rizzo on 24/02/16.
//  Copyright (c) 2016 Riccardo Rizzo. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MailCanvasStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfMail: UIImage?
        static var mailTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawMail() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.302, green: 0.297, blue: 0.297, alpha: 1.000)
        let color2 = color.colorWithAlphaComponent(0.6)
        let color3 = color2.colorWithAlphaComponent(0.2)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color2.CGColor, color3.CGColor], [0, 1])!

        //// Text Drawing
        let textRect = CGRectMake(41, 127, 190, 73)
        let textTextContent = NSString(string: "NEW\nMESSAGE")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBoldItalic", size: 32)!, NSForegroundColorAttributeName: color2, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context!)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(30, 211))
        bezier2Path.addCurveToPoint(CGPointMake(241, 211), controlPoint1: CGPointMake(37, 216), controlPoint2: CGPointMake(234, 217))
        bezier2Path.addCurveToPoint(CGPointMake(252, 61), controlPoint1: CGPointMake(248, 205), controlPoint2: CGPointMake(257, 68))
        bezier2Path.addCurveToPoint(CGPointMake(17, 61), controlPoint1: CGPointMake(247, 54), controlPoint2: CGPointMake(21, 55))
        bezier2Path.addCurveToPoint(CGPointMake(30, 211), controlPoint1: CGPointMake(13, 67), controlPoint2: CGPointMake(23, 206))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPointMake(16.5, 61.5))
        bezier2Path.addCurveToPoint(CGPointMake(134.5, 117.5), controlPoint1: CGPointMake(16.5, 61.5), controlPoint2: CGPointMake(132.5, 117.5))
        bezier2Path.addCurveToPoint(CGPointMake(252.5, 66.02), controlPoint1: CGPointMake(136.5, 117.5), controlPoint2: CGPointMake(252.5, 66.02))
        CGContextSaveGState(context!)
        bezier2Path.addClip()
        CGContextDrawLinearGradient(context!, gradient, CGPointMake(134.77, 56.12), CGPointMake(134.77, 215.13), CGGradientDrawingOptions())
        CGContextRestoreGState(context!)
        color.setStroke()
        bezier2Path.lineWidth = 7
        bezier2Path.stroke()
    }

    //// Generated Images

    public class var imageOfMail: UIImage {
        if Cache.imageOfMail != nil {
            return Cache.imageOfMail!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(270, 270), false, 0)
            MailCanvasStyleKit.drawMail()

        Cache.imageOfMail = UIGraphicsGetImageFromCurrentImageContext()!.imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfMail!
    }

    //// Customization Infrastructure

    @IBOutlet var mailTargets: [AnyObject]! {
        get { return Cache.mailTargets }
        set {
            Cache.mailTargets = newValue
            for target: AnyObject in newValue {
                if #available(iOS 9.0, *) {
                    target.performSelector(#selector(CIImageAccumulator.setImage(_:)), withObject: MailCanvasStyleKit.imageOfMail)
                } else {
                    // Fallback on earlier versions
                }
            }
        }
    }

}
